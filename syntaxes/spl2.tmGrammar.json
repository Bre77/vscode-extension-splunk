{
  "name": "SPL2",
  "scopeName": "source.spl2",
  "uuid": "3c03d6f9-4d13-4df6-a9de-7121fba46f83",
  "patterns": [
    {
      "include": "#comment"
    },
    {
      "include": "#expression"
    },
    {
      "include": "#identifier"
    }
  ],
  "repository": {
   "boolean-literal": {
      "patterns": [
        {
          "name": "constant.language.boolean.true.spl",
          "match": "(?<!\\.)\\btrue\\b"
        },
        {
          "name": "constant.language.boolean.false.spl",
          "match": "(?<!\\.)\\bfalse\\b"
        }
      ]
    },
    "comment": {
      "patterns": [
        {
          "name": "comment.block.spl",
          "begin": "/\\*",
          "beginCaptures": {
            "0": {
              "name": "punctuation.definition.comment.spl"
            }
          },
          "end": "\\*/",
          "endCaptures": {
            "0": {
              "name": "punctuation.definition.comment.spl"
            }
          }
        },
        {
          "name": "comment.line.double-slash.spl",
          "begin": "(^[ \\t]+)?(//)",
          "beginCaptures": {
            "1": {
              "name": "punctuation.whitespace.comment.leading.spl"
            },
            "2": {
              "name": "punctuation.definition.comment.spl"
            }
          },
          "end": "(?=$)"
        }
      ]
    },
    "expression": {
      "patterns": [
        {
          "include": "#identifier"
        },
        {
          "include": "#literal"
        },

        {
          "include": "#keyword"
        },
        {
          "include": "#paren-expression"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "include": "#identifier-simple"
        },
        {
          "include": "#identifier-escaped"
        }
      ]
    },
    "identifier-escaped": {
      "name": "variable.other.readwrite.spl",
      "begin": "'",
      "beginCaptures": {
        "0": {
          "name": "punctuation.identifier.begin.spl"
        }
      },
      "end": "'",
      "endCaptures": {
        "0": {
          "name": "punctuation.identifier.end.spl"
        }
      },
      "patterns": [
        {
          "include": "#identifier-escaped-character-escape"
        },
        {
          "include": "#identifier-escaped-template"
        }
      ]
    },
    "identifier-escaped-character-escape": {
      "name": "constant.character.escape.spl",
      "match": "\\\\.$"
    },
    "identifier-escaped-template": {
      "name": "meta.template.spl",
      "begin": "\\$\\{",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.template.begin.spl"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template.end.spl"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "identifier-simple": {
      "name": "variable.other.readwrite.spl",
      "match": "\\$?[_[:alpha:]][_[:alnum:]]*"
    },
    "literal": {
      "patterns": [
        {
          "include": "#boolean-literal"
        },
        {
          "include": "#logarithm-literal"
        },
        {
          "include": "#null-literal"
        },
        {
          "include": "#numeric-literal"
        },
        {
          "include": "#string-literal"
        },
        {
          "include": "#timespan-literal"
        }
      ]
    },
    "logarithm-literal": {
      "match": "(?<!\\w)(\\.?\\d(?:\\d|\\.\\d)*)(log)(\\.?\\d(?:\\d|\\.\\d)*)",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.spl"
        },
        "2": {
          "name": "constant.numeric.other.logarithm.spl"
        },
        "3": {
          "name": "constant.numeric.decimal.spl"
        }
      }
    },
    "null-literal": {
      "name": "constant.language.null.spl",
      "match": "(?<!\\.)\\b(null|NULL)\\b"
    },
    "numeric-literal": {
      "match": "(?<!\\w)\\.?\\d(?:(?:[0-9a-zA-Z])|(?<=[eE])[+-]|\\.\\d)*",
      "captures": {
        "0": {
          "patterns": [
            {
              "begin": "(?=.)",
              "end": "$",
              "patterns": [
                {
                  "match": "(\\G(?=[0-9.]))([0-9]+)?((?:(?<=[0-9])|\\.(?=[0-9])))([0-9]+)?(([eE])(\\+?)(\\-?)((?:[0-9]+)))?([FD](?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.spl"
                    },
                    "3": {
                      "name": "constant.numeric.other.separator.decimals.spl"
                    },
                    "4": {
                      "name": "constant.numeric.decimal.spl"
                    },
                    "6": {
                      "name": "constant.numeric.other.exponent.spl"
                    },
                    "7": {
                      "name": "keyword.operator.arithmetic.spl"
                    },
                    "8": {
                      "name": "keyword.operator.arithmetic.spl"
                    },
                    "9": {
                      "name": "constant.numeric.decimal.spl"
                    },
                    "10": {
                      "name": "constant.numeric.other.suffix.spl"
                    }
                  }
                },
                {
                  "match": "(\\G(?=[0-9.]))([0-9]+)(([eE])(\\+?)(\\-?)((?:[0-9]+)))?((?:[LFD])(?!\\w))?$",
                  "captures": {
                    "2": {
                      "name": "constant.numeric.decimal.spl"
                    },
                    "4": {
                      "name": "constant.numeric.other.exponent.spl"
                    },
                    "5": {
                      "name": "keyword.operator.arithmetic.spl"
                    },
                    "6": {
                      "name": "keyword.operator.arithmetic.spl"
                    },
                    "7": {
                      "name": "constant.numeric.decimal.spl"
                    },
                    "8": {
                      "name": "constant.numeric.other.suffix.spl"
                    }
                  }
                },
                {
                  "match": "(?:(?:[0-9a-zA-Z])|(?<=[eE])[+-]|\\.\\d)+",
                  "name": "invalid.illegal.constant.numeric.spl"
                }
              ]
            }
          ]
        }
      }
    },
    "raw-string-literal": {
      "name": "string.quoted.double.spl",
      "begin": "@\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.spl"
        }
      },
      "end": "\"(?=[^\"])",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.string.end.spl"
        }
      },
      "patterns": [
        {
          "include": "#raw-string-literal-character-escape"
        }
      ]
    },
    "raw-string-literal-character-escape": {
      "name": "constant.character.escape.spl",
      "match": "\"\""
    },
    "regular-string-literal": {
      "name": "string.quoted.double.spl",
      "begin": "(?<!@)\"",
      "beginCaptures": {
        "0": {
          "name": "punctuation.definition.string.begin.spl"
        }
      },
      "end": "(\")|((?:[^\\\\\\n])$)",
      "endCaptures": {
        "1": {
          "name": "punctuation.definition.string.end.spl"
        },
        "2": {
          "name": "invalid.illegal.newline.spl"
        }
      },
      "patterns": [
        {
          "include": "#regular-string-literal-character-escape"
        },
        {
          "include": "#regular-string-literal-template"
        }
      ]
    },
    "regular-string-literal-character-escape": {
      "name": "constant.character.escape.spl",
      "match": "\\\\(u[0-9A-Fa-f]{4}|\\$\\{|.|$)"
    },
    "regular-string-literal-template": {
      "name": "meta.template.spl",
      "begin": "(?<=[^\\\\]|^)(\\$\\{)",
      "beginCaptures": {
        "1": {
          "name": "string.quoted.double.spl"
        },
        "2": {
          "name": "punctuation.definition.template.begin.spl"
        }
      },
      "end": "\\}",
      "endCaptures": {
        "0": {
          "name": "punctuation.definition.template.end.spl"
        }
      },
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    },
    "string-literal": {
      "patterns": [
        {
          "include": "#regular-string-literal"
        },
        {
          "include": "#raw-string-literal"
        }
      ]
    },
    "timespan-literal": {
      "match": "(?<!\\w)(\\d+)([a-dg-zA-DG-Z][a-zA-Z]*)",
      "captures": {
        "1": {
          "name": "constant.numeric.decimal.spl"
        },
        "2": {
          "name": "constant.numeric.other.time.spl"
        }
      }
    },
    
    "keyword": {
      "match": "\\b(between|BETWEEN|is|IS|like|LIKE'|and|AND|in|IN|not|NOT|or|OR|xor|XOR|after|apply|as|AS|asc|ASC|before|bin|branch|by|BY|dedup|desc|DESC|distinct|DISTINCT|eval|eventstats|exists|EXISTS|export|fit|from|FROM|function|group|GROUP|groupby|GROUPBY|having|HAVING|head|histperc|import|inner|INNER|into|join|JOIN|left|LEFT|limit|LIMIT|lookup|offset|OFFSET|on|ON|onchange|order|ORDER|orderby|ORDERBY|outer|OUTER|OUTPUT|OUTPUTNEW|rename|reset|return|rex|search|select|SELECT|sort|stats|streamstats|through|thru|timechart|timewrap|type|union|UNION|where|WHERE|while)\\b",
      "name": "keyword"
    },
    "paren-expression": {
      "begin": "\\(",
      "end": "\\)",
      "beginCaptures": {
        "0": {
          "name": "punctuation.paren.open"
        }
      },
      "endCaptures": {
        "0": {
          "name": "punctuation.paren.close"
        }
      },
      "name": "expression.group",
      "patterns": [
        {
          "include": "#expression"
        }
      ]
    }
  }
}